<?php

namespace design_patterns\behavioral\myCommand;
//transaction
//encapsulate a request into an object
//the request is to take a current score (number of points) and increment it by a certain amount
//take starting points
//$points = 0;

abstract class Command {
    //this class declares an interface for executing operations
    //concrete ACommand subclasses specifyt a receiver-action pair by storing the receiver as an isntance variable
    //  and by by implementing Execute to invoke the request
    function Execute() {
        echo "\nthis is the execute function from the Command abstract class ";
        //replace this...this is a "simplest form" operation
    } //end Execute()
    function AddAPoint() {

    }
}//end ACommand{}

class addPointsCommandA extends Command {
    protected $requestReceiverObject;
    public function Execute()
    {
        var_dump($this->requestReceiverObject);
        echo "\nthis is the Execute function from the addPointsCommand subclass ";
        //parent::Execute(); // TODO: Change the autogenerated stub
    }

    public function AddAPoint()
    {
        var_dump($this->requestReceiverObject->TeamOwnerpoints);

    }

    public function __construct(TeamOwnerReceiver $rObject)
    {
        $this->requestReceiverObject = $rObject;
        echo "\nconstruct ran from addPointsCommandA(TeamOwnerReceiver) ran";
    }
}//end addPointsCommandA{}
class concreteCommandB extends Command {
    private $requestReceiverObject;
    public function Execute()
    {
        echo "\nthis is the execute function from the cc subclass ";
        parent::Execute(); // TODO: Change the autogenerated stub

    }
    public function __construct(TeamOwnerReceiver $rObject)
    {
        $this->requestReceiverObject = $rObject;
    }
}//end concreteCommandB{}

class TeamOwnerReceiver {
    protected $TeamOwnerpoints = 0;

}//end TeamOwnerReceiver{}

class Invoker {
    private $commandObject;

    public function setCommand(Command $cmd)
    {
        $this->commandObject = $cmd;
        echo "\nsetCommand ran";
    }
    public function run() {
        //$this->commandObject->Execute();
        $this->commandObject->AddAPoint();
        echo "\nrun ran";
        var_dump($this->commandObject);
    }
}//end Invoker{}

//client code
echo "\nthis is the client code";
$buttonPressInvokerObject = new Invoker();
$TeamOwnerReceiverObject = new TeamOwnerReceiver();
$buttonPressInvokerObject->setCommand(new addPointsCommandA($TeamOwnerReceiverObject));
$buttonPressInvokerObject->run();


